{"version":3,"names":[],"mappings":"","sources":["accessible-dropdown.js"],"sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.keyboard = exports.getSettings = void 0;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// Default settings\nvar defaultSettings = {\n  navName: \"nav-main\",\n  uuidPrefix: 'accessible-dropdown',\n  // default uuidPrefix to be added\n  hasChildrenClass: 'hasChildren',\n  topNavItemClass: '__li-level1',\n  // default css class for a top-level navigation item in the menu\n  subNavItemClass: '__sublevel',\n  // default css class for a submenu\n  hoverClass: 'hover',\n  // default css class for the hover state\n  focusClass: 'focus',\n  // default css class for the focus state\n  openClass: 'open' // default css class for the open state\n\n};\n\nvar getSettings = function getSettings(customSettings) {\n  return _objectSpread({}, defaultSettings, {}, customSettings);\n};\n\nexports.getSettings = getSettings;\nvar keyboard = {\n  BACKSPACE: 8,\n  COMMA: 188,\n  DELETE: 46,\n  DOWN: 40,\n  END: 35,\n  ENTER: 13,\n  ESCAPE: 27,\n  HOME: 36,\n  LEFT: 37,\n  PAGE_DOWN: 34,\n  PAGE_UP: 33,\n  PERIOD: 190,\n  RIGHT: 39,\n  SPACE: 32,\n  TAB: 9,\n  UP: 38\n};\nexports.keyboard = keyboard;\n\n},{}],2:[function(require,module,exports){\n\"use strict\";\n\nvar _accessibleDropdown = require(\"./accessible-dropdown.defaults\");\n\nvar _utils = _interopRequireDefault(require(\"./utils\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar uuid = 0,\n    //mouseTimeoutID = null,\nfocusTimeoutID = null;\n\nvar AccessibleDropdown = function AccessibleDropdown(element, opts) {\n  _classCallCheck(this, AccessibleDropdown);\n\n  var self = this;\n  self.settings = (0, _accessibleDropdown.getSettings)(opts);\n\n  if (typeof element === 'string') {\n    self.element = document.querySelector(element);\n  } else {\n    if (typeof element.length !== 'undefined' && element.length > 0) {\n      self.element = element[0];\n    } else {\n      self.element = element;\n    }\n  }\n\n  self.init();\n};\n\nAccessibleDropdown.prototype = {\n  init: function init() {\n    var self = this;\n    self.menu = self.element.querySelectorAll('ul')[0]; // selects the first UL item inside the nav element\n    // Add ARIA role attribute if main element is not a NAV\n\n    if (self.element.tagName !== 'NAV') self.element.setAttribute('role', 'navigation');\n    self.focusable = self.menu.querySelectorAll('button, [href], input, select, textarea, [tabindex]:not([tabindex=\"-1\"])');\n    var navItemsWithChildren = self.menu.querySelectorAll(\".\".concat(self.settings.hasChildrenClass));\n    navItemsWithChildren && Array.from(navItemsWithChildren).forEach(function (item) {\n      var link = item.querySelector(':scope > a'),\n          subnav = item.querySelector(':scope > ul');\n      self.addUniqueId(link);\n      self.addUniqueId(subnav);\n\n      _utils[\"default\"].setAttributes(link, {\n        'aria-haspopup': true,\n        'aria-controls': subnav.id,\n        'aria-expanded': false,\n        'tabindex': 0\n      });\n\n      _utils[\"default\"].setAttributes(subnav, {\n        'aria-hidden': true,\n        'aria-labelledby': link.id\n      });\n    }); // Add listeners\n\n    self.onFocusinListener = self.onFocusin.bind(self);\n    self.onFocusoutListener = self.onFocusout.bind(self);\n    self.onKeydownListener = self.onKeydown.bind(self);\n    self.menu.addEventListener('focusin', self.onFocusinListener);\n    self.menu.addEventListener('focusout', self.onFocusoutListener);\n    self.menu.addEventListener('keydown', self.onKeydownListener);\n  },\n  onMouseover: function onMouseover(e) {\n    var self = this;\n    var target = e.target.tagName == 'LI' ? e.target : e.target.closest('li');\n    if (!target) return false;\n    target.classList.add(self.settings.hoverClass);\n  },\n  onMouseout: function onMouseout(e) {\n    var self = this;\n    var target = e.target.tagName == 'LI' ? e.target : e.target.closest('li');\n    if (!target) return false;\n    target.classList.remove(self.settings.hoverClass);\n  },\n  onFocusin: function onFocusin(e) {\n    var self = this;\n    clearTimeout(focusTimeoutID);\n    var target = e.target,\n        parent = target.closest('li');\n    parent.classList.add(self.settings.focusClass);\n    self.toggleSubnav(e, target);\n  },\n  onFocusout: function onFocusout(e) {\n    var self = this;\n    var target = e.target,\n        parent = target.closest('li');\n    parent.classList.remove(self.settings.focusClass);\n    focusTimeoutID = setTimeout(function () {\n      self.toggleSubnav(e, target, true);\n    }, 250);\n  },\n  onKeydown: function onKeydown(e) {\n    var self = this,\n        target = e.target,\n        parent = target.closest('li'),\n        isTopNavItem = parent.classList.contains(self.settings.navName + self.settings.topNavItemClass),\n        topNavItem = target.closest('.' + self.settings.navName + self.settings.topNavItemClass),\n        tabbables = Array.from(self.focusable).filter(function (item) {\n      return getComputedStyle(item).visibility === 'visible';\n    }),\n        keycode = e.keyCode || e.which,\n        i = 0;\n\n    switch (keycode) {\n      case _accessibleDropdown.keyboard.DOWN:\n        e.preventDefault();\n\n        var _target;\n\n        if (parent.classList.contains(self.settings.hasChildrenClass) && isTopNavItem) {\n          self.toggleSubnav(e, e.target);\n          var subnav = parent.querySelector(\".\".concat(self.settings.navName).concat(self.settings.subNavItemClass));\n          subnav.querySelectorAll('button, [href], input, select, textarea, [tabindex]:not([tabindex=\"-1\"])')[0].focus();\n        } else if (parent.nextElementSibling) {\n          _target = parent.nextElementSibling.querySelectorAll('button, [href], input, select, textarea, [tabindex]:not([tabindex=\"-1\"])')[0];\n\n          _target.focus();\n\n          self.toggleSubnav(e, _target);\n        } else if (topNavItem.nextElementSibling) {\n          for (i = 0; i < tabbables.length; i++) {\n            if (tabbables[i] == target) {\n              _target = tabbables[i + 1];\n              break;\n            }\n          }\n\n          _target.focus();\n\n          self.toggleSubnav(e, _target);\n        }\n\n        break;\n\n      case _accessibleDropdown.keyboard.UP:\n        e.preventDefault();\n\n        for (i = 0; i < tabbables.length; i++) {\n          if (tabbables[i] == target) {\n            var previous = tabbables[i - 1];\n            break;\n          }\n        }\n\n        if (!previous) return false;\n        previous.focus();\n        self.toggleSubnav(e, previous);\n        break;\n\n      case _accessibleDropdown.keyboard.RIGHT:\n        e.preventDefault();\n\n        if (isTopNavItem) {\n          if (!parent.nextElementSibling) return false;\n          _target = parent.nextElementSibling.querySelectorAll('button, [href], input, select, textarea, [tabindex]:not([tabindex=\"-1\"])')[0];\n        } else {\n          for (i = 0; i < tabbables.length; i++) {\n            if (tabbables[i] == target) {\n              _target = tabbables[i + 1];\n              break;\n            }\n          }\n        }\n\n        _target.focus();\n\n        self.toggleSubnav(e, _target);\n        break;\n\n      case _accessibleDropdown.keyboard.LEFT:\n        e.preventDefault();\n\n        if (isTopNavItem) {\n          if (!parent.previousElementSibling) return false;\n          _target = parent.previousElementSibling.querySelectorAll('button, [href], input, select, textarea, [tabindex]:not([tabindex=\"-1\"])')[0];\n        } else {\n          for (i = 0; i < tabbables.length; i++) {\n            if (tabbables[i] == target) {\n              _target = tabbables[i - 1];\n              break;\n            }\n          }\n        }\n\n        _target.focus();\n\n        self.toggleSubnav(e, _target);\n        break;\n    }\n  },\n  toggleSubnav: function toggleSubnav(event, target, hide) {\n    var self = this;\n    var parent = target.closest(\"li\"),\n        hasPopup = parent.querySelector(\"[aria-haspopup]\"),\n        subnav = parent.querySelector(\":scope > .\".concat(self.settings.navName + self.settings.subNavItemClass)),\n        siblings = Array.prototype.filter.call(parent.parentNode.children, function (child) {\n      return child !== parent;\n    }); // Hide all panels.\n\n    if (hide) {\n      var activeItems = self.menu.querySelectorAll(\"[aria-expanded=true]\");\n      activeItems && Array.from(activeItems).forEach(function (item) {\n        item.setAttribute(\"aria-expanded\", \"false\");\n\n        var _subnav = document.getElementById(item.getAttribute(\"aria-controls\"));\n\n        _subnav.classList.remove(self.settings.openClass);\n\n        _subnav.setAttribute(\"aria-hidden\", \"true\");\n      });\n    } else {\n      hasPopup && hasPopup.setAttribute(\"aria-expanded\", \"true\");\n\n      if (subnav) {\n        subnav && subnav.classList.add(self.settings.openClass);\n        subnav && subnav.setAttribute(\"aria-hidden\", \"false\");\n\n        var _subnav = subnav.querySelector(\".\".concat(self.settings.navName + self.settings.subNavItemClass));\n\n        _subnav && _subnav.classList.remove(self.settings.openClass);\n        _subnav && _subnav.setAttribute(\"aria-hidden\", \"true\");\n      } // close siblings subnavs\n\n\n      siblings && Array.from(siblings).forEach(function (sibling) {\n        sibling.classList.remove(self.settings.focusClass);\n        var subItems = sibling.querySelectorAll(\"[aria-expanded]\");\n        subItems && Array.from(subItems).forEach(function (item) {\n          item.setAttribute(\"aria-expanded\", \"false\");\n\n          var _subnav = document.getElementById(item.getAttribute(\"aria-controls\"));\n\n          _subnav.classList.remove(self.settings.openClass);\n\n          _subnav.setAttribute(\"aria-hidden\", \"true\");\n        });\n      }); //this.toggleExpandedEventHandlers()\n    }\n  },\n  addUniqueId: function addUniqueId(element) {\n    if (!element.id) element.id = this.settings.uuidPrefix + \"-\" + new Date().getTime() + \"-\" + ++uuid;\n  }\n};\nwindow.AccessibleDropdown = AccessibleDropdown; // Array.from polyfill\n// Production steps of ECMA-262, Edition 6, 22.1.2.1\n\nif (!Array.from) {\n  Array.from = function () {\n    var toStr = Object.prototype.toString;\n\n    var isCallable = function isCallable(fn) {\n      return typeof fn === 'function' || toStr.call(fn) === '[object Function]';\n    };\n\n    var toInteger = function toInteger(value) {\n      var number = Number(value);\n\n      if (isNaN(number)) {\n        return 0;\n      }\n\n      if (number === 0 || !isFinite(number)) {\n        return number;\n      }\n\n      return (number > 0 ? 1 : -1) * Math.floor(Math.abs(number));\n    };\n\n    var maxSafeInteger = Math.pow(2, 53) - 1;\n\n    var toLength = function toLength(value) {\n      var len = toInteger(value);\n      return Math.min(Math.max(len, 0), maxSafeInteger);\n    }; // The length property of the from method is 1.\n\n\n    return function from(arrayLike\n    /*, mapFn, thisArg */\n    ) {\n      // 1. Let C be the this value.\n      var C = this; // 2. Let items be ToObject(arrayLike).\n\n      var items = Object(arrayLike); // 3. ReturnIfAbrupt(items).\n\n      if (arrayLike == null) {\n        throw new TypeError('Array.from requires an array-like object - not null or undefined');\n      } // 4. If mapfn is undefined, then let mapping be false.\n\n\n      var mapFn = arguments.length > 1 ? arguments[1] : void undefined;\n      var T;\n\n      if (typeof mapFn !== 'undefined') {\n        // 5. else\n        // 5. a If IsCallable(mapfn) is false, throw a TypeError exception.\n        if (!isCallable(mapFn)) {\n          throw new TypeError('Array.from: when provided, the second argument must be a function');\n        } // 5. b. If thisArg was supplied, let T be thisArg; else let T be undefined.\n\n\n        if (arguments.length > 2) {\n          T = arguments[2];\n        }\n      } // 10. Let lenValue be Get(items, \"length\").\n      // 11. Let len be ToLength(lenValue).\n\n\n      var len = toLength(items.length); // 13. If IsConstructor(C) is true, then\n      // 13. a. Let A be the result of calling the [[Construct]] internal method\n      // of C with an argument list containing the single item len.\n      // 14. a. Else, Let A be ArrayCreate(len).\n\n      var A = isCallable(C) ? Object(new C(len)) : new Array(len); // 16. Let k be 0.\n\n      var k = 0; // 17. Repeat, while k < len… (also steps a - h)\n\n      var kValue;\n\n      while (k < len) {\n        kValue = items[k];\n\n        if (mapFn) {\n          A[k] = typeof T === 'undefined' ? mapFn(kValue, k) : mapFn.call(T, kValue, k);\n        } else {\n          A[k] = kValue;\n        }\n\n        k += 1;\n      } // 18. Let putStatus be Put(A, \"length\", len, true).\n\n\n      A.length = len; // 20. Return A.\n\n      return A;\n    };\n  }();\n}\n/*\n * scope polyfill\n * https://stackoverflow.com/questions/6481612/queryselector-search-immediate-children\n */\n\n\n(function (doc, proto) {\n  try {\n    // check if browser supports :scope natively\n    doc.querySelector(':scope body');\n  } catch (err) {\n    // polyfill native methods if it doesn't\n    ['querySelector', 'querySelectorAll'].forEach(function (method) {\n      var nativ = proto[method];\n\n      proto[method] = function (selectors) {\n        if (/(^|,)\\s*:scope/.test(selectors)) {\n          // only if selectors contains :scope\n          var id = this.id; // remember current element id\n\n          this.id = 'ID_' + Date.now(); // assign new unique id\n\n          selectors = selectors.replace(/((^|,)\\s*):scope/g, '$1#' + this.id); // replace :scope with #ID\n\n          var result = doc[method](selectors);\n          this.id = id; // restore previous id\n\n          return result;\n        } else {\n          return nativ.call(this, selectors); // use native code for other selectors\n        }\n      };\n    });\n  }\n})(window.document, Element.prototype);\n/*\n * closest polyfill\n * https://developer.mozilla.org/it/docs/Web/API/Element/closest\n */\n\n\nif (!Element.prototype.matches) {\n  Element.prototype.matches = Element.prototype.msMatchesSelector || Element.prototype.webkitMatchesSelector;\n}\n\nif (!Element.prototype.closest) {\n  Element.prototype.closest = function (s) {\n    var el = this;\n\n    do {\n      if (el.matches(s)) return el;\n      el = el.parentElement || el.parentNode;\n    } while (el !== null && el.nodeType === 1);\n\n    return null;\n  };\n}\n\n},{\"./accessible-dropdown.defaults\":1,\"./utils\":3}],3:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\nvar UTILS = {\n  /**\n  * Get all of an element's parent elements up the DOM tree\n  * https://gomakethings.com/climbing-up-and-down-the-dom-tree-with-vanilla-javascript/\n  * @param  {Node}   elem     The element\n  * @param  {String} selector Selector to match against [optional]\n  * @return {Array}           The parent elements\n  */\n  getParents: function getParents(elem, selector) {\n    // Element.matches() polyfill\n    if (!Element.prototype.matches) {\n      Element.prototype.matches = Element.prototype.matchesSelector || Element.prototype.mozMatchesSelector || Element.prototype.msMatchesSelector || Element.prototype.oMatchesSelector || Element.prototype.webkitMatchesSelector || function (s) {\n        var matches = (this.document || this.ownerDocument).querySelectorAll(s),\n            i = matches.length; //while (--i >= 0 && matches.item(i) !== this) {}\n\n        return i > -1;\n      };\n    } // Setup parents array\n\n\n    var parents = []; // Get matching parent elements\n\n    for (; elem && elem !== document; elem = elem.parentNode) {\n      // Add matching parents to array\n      if (selector) {\n        if (elem.matches(selector)) {\n          parents.push(elem);\n        }\n      } else {\n        parents.push(elem);\n      }\n    }\n\n    return parents;\n  },\n  setAttributes: function setAttributes(el, attrs) {\n    for (var key in attrs) {\n      el.setAttribute(key, attrs[key]);\n    }\n  }\n};\nvar _default = UTILS;\nexports[\"default\"] = _default;\n\n},{}]},{},[2]);\n"],"file":"accessible-dropdown.js"}